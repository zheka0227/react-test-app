{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","xhr","XMLHttpRequest","open","send","onreadystatechange","readyState","status","console","log","statusText","setState","JSON","parse","responseText","th","fontSize","padding","td","background","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","value","name","bays","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","bay","bayType","bayCount","free","row","react_default","a","createElement","style","push","err","return","className","fontFamily","textAlign","borderCollapse","borderSpacing","color","border","borderRadius","fontWeight","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAmFeA,cAhFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,IAHSR,oFAMC,IAAAS,EAAAN,KACZO,EAAM,IAAIC,eACRD,EAAIE,KAAK,MAAO,qGAAqG,GACrHF,EAAIG,OAEJH,EAAII,mBAAqB,WACvB,GAAuB,IAAnBJ,EAAIK,WACN,OAAO,EAGU,MAAfL,EAAIM,OACNC,QAAQC,IAAIR,EAAIM,OAAS,KAAON,EAAIS,YAEpCV,EAAKW,SAAS,CACZZ,KAAMa,KAAKC,MAAMZ,EAAIa,kDAMnC,IAUMC,EAAK,CACTC,SAAU,OACVC,QAAS,QAELC,EAAK,CACTC,WAAY,UACZF,QAAS,QAOPG,EAAM,GAxBHC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAyBP,QAAAC,EAAAC,EAAgBhC,KAAKI,MAAMC,KAA3B4B,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAgC,KAAxBU,EAAwBN,EAAAO,MAC1BC,EAAOF,EAAKE,KACZC,EAAOH,EAAKG,KAFcC,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IAG9B,QAAAc,EAAAC,EAAeL,EAAfP,OAAAC,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,OAAQK,EAARF,EAAAN,MACE,GAAgB,2BAAbQ,EAAIC,QAAmC,CACxC,IAAIC,EAAWF,EAAIE,SACfC,EAAOH,EAAIG,KACXC,EAAMC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,MAAIC,MAAO9B,GAAKe,GAAUY,EAAAC,EAAAC,cAAA,MAAIC,MAAO9B,GAAKwB,GAAcG,EAAAC,EAAAC,cAAA,MAAIC,MAAO9B,GAAKyB,IACtFvB,EAAI6B,KAAKL,KARiB,MAAAM,GAAAd,GAAA,EAAAC,EAAAa,EAAA,YAAAf,GAAA,MAAAI,EAAAY,QAAAZ,EAAAY,SAAA,WAAAf,EAAA,MAAAC,KAzBzB,MAAAa,GAAA5B,GAAA,EAAAC,EAAA2B,EAAA,YAAA7B,GAAA,MAAAK,EAAAyB,QAAAzB,EAAAyB,SAAA,WAAA7B,EAAA,MAAAC,GAqCP,OACEsB,EAAAC,EAAAC,cAAA,SAAOK,UAAU,aAAaJ,MArCb,CACjBK,WAAY,sBACZC,UAAW,OACXC,eAAgB,WAChBC,cAAe,MACfrC,WAAY,UACZsC,MAAO,UACPC,OAAQ,qBACRC,aAAc,SA8Bdd,EAAAC,EAAAC,cAAA,WAASC,MApBK,CACdhC,SAAU,OACV4C,WAAY,SAkBZ,kDACAf,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,MAAOjC,GAAX,mBACA8B,EAAAC,EAAAC,cAAA,MAAIC,MAAOjC,GAAX,uBACA8B,EAAAC,EAAAC,cAAA,MAAIC,MAAOjC,GAAX,0BAGN8B,EAAAC,EAAAC,cAAA,aACG3B,WA1ESyC,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c37ece46.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    }\n}\n  componentWillMount(){\n    const xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://api.tfl.gov.uk/Occupancy/CarPark?app_key=3f141a0065325b28b67b0888409be826&app_id=d73e2064', true); \n            xhr.send();\n\n            xhr.onreadystatechange = () => {\n              if (xhr.readyState !== 4) {\n                return false\n              }\n\n              if (xhr.status !== 200) {\n                console.log(xhr.status + ': ' + xhr.statusText)\n              } else {\n                this.setState({\n                  data: JSON.parse(xhr.responseText),\n                })\n              }\n            }\n  }\n  render() {\n    const tableStyle = {\n      fontFamily: \"Lucida Sans Unicode\",\n      textAlign: \"left\",\n      borderCollapse: \"separate\",\n      borderSpacing: \"5px\",\n      background: \"#ECE9E0\",\n      color: \"#656665\",\n      border: \"16px solid #ECE9E0\",\n      borderRadius: \"20px\"\n    }\n    const th = {\n      fontSize: \"18px\",\n      padding: \"10px\"\n    }\n    const td = {\n      background: \"#F5D7BF\",\n      padding: \"10px\"\n    }\n    const caption = {\n      fontSize: \"18px\",\n      fontWeight: \"bold\"\n    }\n\n    var arr = [];\n    for(var item of this.state.data){\n      var name = item.name;\n      var bays = item.bays;\n      for(var bay of bays)\n        if(bay.bayType==\"Pay and Display Parking\"){\n          var bayCount = bay.bayCount;\n          var free = bay.free;\n          var row = <tr><td style={td}>{name}</td><td style={td}>{bayCount}</td><td style={td}>{free}</td></tr>;\n          arr.push(row);\n        } \n    }\n    \n    return (\n      <table className=\"tableClass\" style={tableStyle}>\n      <caption style={caption}>Parking lots of type \"Pay and Display Parking\"</caption>\n      <thead>\n        <tr>\n            <th style={th}>Name of carpark</th>\n            <th style={th}>Count of all places</th>\n            <th style={th}>Count of free places</th>\n        </tr>\n      </thead>\n      <tbody>\n        {arr}\n      </tbody>\n    </table>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}